---
title: "Regression_tree"
format: html
---

```{r}
library(tidyverse)
library(tidymodels)
library(vroom)
library(ggplot2)
```

```{r}
#loading data

#training
trainData <- vroom::vroom("./train.csv", show_col_types = FALSE) %>%
  select(-casual, -registered) %>%
  mutate(count = log1p(count))

#test
testData <- vroom::vroom("./test.csv", show_col_types = FALSE)
```

```{r}
#building the recipe
bike_recipe <- recipe(count ~ ., data = trainData) %>%
  step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
  step_mutate(weather = factor(weather, levels = c(1, 2, 3))) %>%
  step_time(datetime, features = c("hour"), keep_original_cols = FALSE) %>%
  step_mutate(season = factor(season,
                              levels = c(1, 2, 3, 4),
                              labels = c("spring", "summer", "fall", "winter"))) %>%
  step_dummy(all_nominal_predictors()) %>%
  step_normalize(all_numeric_predictors())

bakedBike <- recipe(trainData)
```

```{r}
#regresion tree
tree_model <- rand_forest(mtry = tune(),
                          min_n = tune(),
                          trees = 500) %>%
  set_engine("ranger") %>%
  set_mode("regression")

#workflow for the tree model
tree_wf <- workflow() %>%
  add_recipe(bike_recipe) %>% # Reuse the same recipe
  add_model(tree_model)
```

```{r}
#grid of tuning values for the tree
tree_grid <- grid_regular(mtry(range=c(1,8)),
                          levels=4)

#cross-validation tuning for the tree model
tree_CV_results <- tree_wf %>%
  tune_grid(
    resamples = folds, # Reuse the same folds
    grid = tree_grid,
    metrics = metric_set(rmse, mae)
  )
```

```{r}
# tuning parameters based on RMSE
bestTreeTune <- tree_CV_results %>%
  select_best(metric = "rmse")

print(bestTreeTune)
```

```{r}
# final workflow with the best tree tuning parameters
final_tree_wf <- tree_wf %>%
  finalize_workflow(bestTreeTune)

# Fit the final workflow on the training data
final_tree_fit <- fit(final_tree_wf, data = trainData)

# predict on the test data
tree_predictions <- predict(final_tree_fit, new_data = testData)

# submission file
submission_tree <- tree_predictions %>%
  mutate(.pred = pmax(0, round(expm1(.pred)))) %>%
  rename(count = .pred) %>%
  bind_cols(testData %>% select(datetime)) %>%
  select(datetime, count) %>%
  mutate(datetime = format(as.POSIXct(datetime, tz = "UTC"), "%Y-%m-%d %H:%M:%S"))

# export submission file
vroom::vroom_write(submission_tree, "submission_tree.csv", delim = ',')
```

\
