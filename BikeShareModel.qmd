---
title: "Regression_tree"
format: html
---

```{r}
library(vroom)
library(ggplot2)
library(ranger)
library(bonsai)
library(lightgbm)
library(tidyverse)
library(tidymodels)
```

```{r}
#loading data

#training
trainData <- vroom::vroom("./train.csv", show_col_types = FALSE) %>%
  select(-casual, -registered) %>%
  mutate(count = log1p(count))

#test
testData <- vroom::vroom("./test.csv", show_col_types = FALSE)
```

```{r}
#building the recipe
bike_recipe <- recipe(count ~ ., data = trainData) %>%
  step_mutate(weather = ifelse(weather == 4, 3, weather)) %>%
  step_mutate(weather = factor(weather, levels = c(1, 2, 3))) %>%
  step_time(datetime, features = c("hour"), keep_original_cols = FALSE) %>%
  step_mutate(season = factor(season,
                              levels = c(1, 2, 3, 4),
                              labels = c("spring", "summer", "fall", "winter"))) %>%
  step_dummy(all_nominal_predictors()) %>%
  step_normalize(all_numeric_predictors())

bakedBike <- recipe(trainData)
```

```{r}
# bart
bart_model <- bart(trees=tune()) %>% 
  set_engine('dbarts') %>% 
  set_mode('regression')

#workflow for the forest model
bart_wf <- workflow() %>%
  add_recipe(bike_recipe) %>% 
  add_model(bart_model)

#kfolds for cv
folds <- vfold_cv(trainData, v = 10, repeats = 1) 
```

```{r}
#tree regression tuning
tree_grid <- grid_regular(trees(), levels = 4)

# Run the tuning process
tune_results <- tune_grid(
  object = bart_wf,
  resamples = folds,
  grid = tree_grid,
  metrics = metric_set(rmse)
)
show_best(tune_results, metric = "rmse")
```

```{r}

bestTune <- select_best(tune_results, metric = "rmse")

# final workflow with the best tree tuning parameters
final_wf <- bart_wf %>%
  finalize_workflow(bestTune)

# Fit the final workflow on the training data
final_fit <- fit(final_wf, data = trainData)

# predict on the test data
predictions <- predict(final_fit, new_data = testData)

# submission file
submission <- predictions %>%
  mutate(.pred = pmax(0, round(expm1(.pred)))) %>%
  rename(count = .pred) %>%
  bind_cols(testData %>% select(datetime)) %>%
  select(datetime, count) %>%
  mutate(datetime = format(as.POSIXct(datetime, tz = "UTC"), "%Y-%m-%d %H:%M:%S"))

# export submission file
vroom::vroom_write(submission, "submission_bart.csv", delim = ',')
```

\
